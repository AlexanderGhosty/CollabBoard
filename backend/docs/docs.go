// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/boards": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get all boards where the authenticated user is a member or owner",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Boards"
                ],
                "summary": "List user's boards",
                "responses": {
                    "200": {
                        "description": "List of boards",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/boards.BoardResponse"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/boards.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/boards.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new Kanban board with the authenticated user as owner",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Boards"
                ],
                "summary": "Create a new board",
                "parameters": [
                    {
                        "description": "Board creation details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/boards.CreateBoardRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Board created successfully",
                        "schema": {
                            "$ref": "#/definitions/boards.BoardResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/boards.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/boards.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/boards.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/boards/by-role/{role}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get boards where the user has a specific role (owner or member)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Boards"
                ],
                "summary": "List boards by role",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Role filter (owner or member)",
                        "name": "role",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of boards",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/boards.BoardResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid role parameter",
                        "schema": {
                            "$ref": "#/definitions/boards.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/boards.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/boards.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/boards/{boardId}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get detailed information about a specific board",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Boards"
                ],
                "summary": "Get board by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Board ID",
                        "name": "boardId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Board information",
                        "schema": {
                            "$ref": "#/definitions/boards.BoardResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/boards.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - not a board member",
                        "schema": {
                            "$ref": "#/definitions/boards.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/boards.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update board information (only board owners can update)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Boards"
                ],
                "summary": "Update board",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Board ID",
                        "name": "boardId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Board update details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/boards.UpdateBoardRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Board updated successfully",
                        "schema": {
                            "$ref": "#/definitions/boards.BoardResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/boards.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/boards.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - only owners can update",
                        "schema": {
                            "$ref": "#/definitions/boards.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/boards.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a board (only board owners can delete)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Boards"
                ],
                "summary": "Delete board",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Board ID",
                        "name": "boardId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Board deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/boards.MessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/boards.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - only owners can delete",
                        "schema": {
                            "$ref": "#/definitions/boards.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/boards.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/boards/{boardId}/lists": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get all lists (columns) for a specific board",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Lists"
                ],
                "summary": "Get board lists",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Board ID",
                        "name": "boardId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of board lists",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/lists.ListResponse"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/lists.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/lists.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new list (column) in a Kanban board",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Lists"
                ],
                "summary": "Create a new list",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Board ID",
                        "name": "boardId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "List creation details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/lists.CreateListRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "List created successfully",
                        "schema": {
                            "$ref": "#/definitions/lists.ListResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/lists.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/lists.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/lists.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/boards/{boardId}/lists/normalize": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Manually trigger position normalization for all lists in a board",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Lists"
                ],
                "summary": "Normalize list positions",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Board ID",
                        "name": "boardId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Positions normalized successfully",
                        "schema": {
                            "$ref": "#/definitions/lists.NormalizePositionsResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/lists.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - not a board member",
                        "schema": {
                            "$ref": "#/definitions/lists.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/lists.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/boards/{boardId}/lists/{id}": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update list title and/or position",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Lists"
                ],
                "summary": "Update list",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Board ID",
                        "name": "boardId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "List ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "List update details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/lists.UpdateListRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List updated successfully",
                        "schema": {
                            "$ref": "#/definitions/lists.ListResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/lists.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/lists.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/lists.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a list and all its cards from the board",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Lists"
                ],
                "summary": "Delete list",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Board ID",
                        "name": "boardId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "List ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/lists.MessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/lists.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/lists.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/boards/{boardId}/lists/{id}/move": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Move a list to a new position within the board",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Lists"
                ],
                "summary": "Move list",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Board ID",
                        "name": "boardId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "List ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "New position",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/lists.MoveListRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List moved successfully",
                        "schema": {
                            "$ref": "#/definitions/lists.ListResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/lists.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/lists.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/lists.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/boards/{boardId}/members": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get all members of a specific board",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Board Members"
                ],
                "summary": "List board members",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Board ID",
                        "name": "boardId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of board members",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/boards.BoardMemberResponse"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/boards.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - not a board member",
                        "schema": {
                            "$ref": "#/definitions/boards.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/boards.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Add a user as a member to a board (only board owners can add members)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Board Members"
                ],
                "summary": "Add board member",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Board ID",
                        "name": "boardId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Member details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/boards.AddMemberRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Member added successfully",
                        "schema": {
                            "$ref": "#/definitions/boards.BoardMemberResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/boards.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/boards.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - only owners can add members",
                        "schema": {
                            "$ref": "#/definitions/boards.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/boards.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/boards/{boardId}/members/invite": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Invite a user to join a board using their email address",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Board Members"
                ],
                "summary": "Invite member by email",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Board ID",
                        "name": "boardId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Invitation details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/boards.InviteMemberRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Member invited successfully",
                        "schema": {
                            "$ref": "#/definitions/boards.BoardMemberResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request or role",
                        "schema": {
                            "$ref": "#/definitions/boards.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/boards.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - only owners can invite",
                        "schema": {
                            "$ref": "#/definitions/boards.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/boards.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/boards.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/boards/{boardId}/members/leave": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Allow a user to leave a board they are a member of",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Board Members"
                ],
                "summary": "Leave board",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Board ID",
                        "name": "boardId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully left the board",
                        "schema": {
                            "$ref": "#/definitions/boards.MessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/boards.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - cannot leave board",
                        "schema": {
                            "$ref": "#/definitions/boards.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/boards.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/boards/{boardId}/members/{userId}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Remove a user from a board (only board owners can remove members)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Board Members"
                ],
                "summary": "Remove board member",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Board ID",
                        "name": "boardId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "User ID to remove",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Member removed successfully",
                        "schema": {
                            "$ref": "#/definitions/boards.MessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/boards.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - only owners can remove members",
                        "schema": {
                            "$ref": "#/definitions/boards.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/boards.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/cards/{id}/duplicate": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a copy of an existing card in the same list",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cards"
                ],
                "summary": "Duplicate card",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Card ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Card duplicated successfully",
                        "schema": {
                            "$ref": "#/definitions/cards.CardResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid card ID",
                        "schema": {
                            "$ref": "#/definitions/cards.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/cards.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/cards.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/lists/{listId}/cards": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get all cards in a specific list",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cards"
                ],
                "summary": "Get list cards",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "List ID",
                        "name": "listId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of cards",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/cards.CardResponse"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/cards.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/cards.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new card in a specific list",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cards"
                ],
                "summary": "Create a new card",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "List ID",
                        "name": "listId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Card creation details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/cards.CreateCardRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Card created successfully",
                        "schema": {
                            "$ref": "#/definitions/cards.CardResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/cards.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/cards.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/cards.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/lists/{listId}/cards/{id}": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update card title, description, position, or list",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cards"
                ],
                "summary": "Update card",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "List ID",
                        "name": "listId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Card ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Card update details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/cards.UpdateCardRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Card updated successfully",
                        "schema": {
                            "$ref": "#/definitions/cards.CardResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/cards.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/cards.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/cards.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a card from the list",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cards"
                ],
                "summary": "Delete card",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "List ID",
                        "name": "listId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Card ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Card deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/cards.MessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/cards.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/cards.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/lists/{listId}/cards/{id}/move": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Move a card to a new position within the same list or to a different list",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cards"
                ],
                "summary": "Move card",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Current List ID",
                        "name": "listId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Card ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Move details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/cards.MoveCardRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Card moved successfully",
                        "schema": {
                            "$ref": "#/definitions/cards.CardResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/cards.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/cards.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/cards.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/change-password": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Change the password for the currently authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Change password",
                "parameters": [
                    {
                        "description": "Password change details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.ChangePasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password changed successfully",
                        "schema": {
                            "$ref": "#/definitions/auth.MessageResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request or current password",
                        "schema": {
                            "$ref": "#/definitions/auth.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/auth.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/auth.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "description": "Authenticate user with email and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Login user",
                "parameters": [
                    {
                        "description": "Login credentials",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login successful",
                        "schema": {
                            "$ref": "#/definitions/auth.AuthResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "$ref": "#/definitions/auth.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid credentials",
                        "schema": {
                            "$ref": "#/definitions/auth.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/me": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get information about the currently authenticated user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Get current user",
                "responses": {
                    "200": {
                        "description": "User information",
                        "schema": {
                            "$ref": "#/definitions/auth.UserPublic"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/auth.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/auth.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "description": "Create a new user account with name, email and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "Registration details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Registration successful",
                        "schema": {
                            "$ref": "#/definitions/auth.AuthResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request or email already exists",
                        "schema": {
                            "$ref": "#/definitions/auth.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "auth.AuthResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                },
                "user": {
                    "$ref": "#/definitions/auth.UserPublic"
                }
            }
        },
        "auth.ChangePasswordRequest": {
            "type": "object",
            "required": [
                "currentPassword",
                "newPassword"
            ],
            "properties": {
                "currentPassword": {
                    "type": "string",
                    "example": "oldpassword"
                },
                "newPassword": {
                    "type": "string",
                    "minLength": 6,
                    "example": "newpassword123"
                }
            }
        },
        "auth.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Invalid credentials"
                }
            }
        },
        "auth.LoginRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "john@example.com"
                },
                "password": {
                    "type": "string",
                    "example": "password123"
                }
            }
        },
        "auth.MessageResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Password changed successfully"
                }
            }
        },
        "auth.RegisterRequest": {
            "type": "object",
            "required": [
                "email",
                "name",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "john@example.com"
                },
                "name": {
                    "type": "string",
                    "example": "John Doe"
                },
                "password": {
                    "type": "string",
                    "minLength": 6,
                    "example": "password123"
                }
            }
        },
        "auth.UserPublic": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "john@example.com"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "name": {
                    "type": "string",
                    "example": "John Doe"
                }
            }
        },
        "boards.AddMemberRequest": {
            "type": "object",
            "required": [
                "userId"
            ],
            "properties": {
                "role": {
                    "type": "string",
                    "example": "member"
                },
                "userId": {
                    "type": "integer",
                    "example": 2
                }
            }
        },
        "boards.BoardMemberResponse": {
            "type": "object",
            "properties": {
                "boardId": {
                    "type": "integer",
                    "example": 1
                },
                "email": {
                    "type": "string",
                    "example": "john@example.com"
                },
                "name": {
                    "type": "string",
                    "example": "John Doe"
                },
                "role": {
                    "type": "string",
                    "example": "member"
                },
                "userId": {
                    "type": "integer",
                    "example": 2
                }
            }
        },
        "boards.BoardResponse": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "example": "2023-01-01T00:00:00Z"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "name": {
                    "type": "string",
                    "example": "My Project Board"
                },
                "ownerId": {
                    "type": "integer",
                    "example": 1
                },
                "role": {
                    "type": "string",
                    "example": "owner"
                }
            }
        },
        "boards.CreateBoardRequest": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "example": "My Project Board"
                }
            }
        },
        "boards.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Board not found"
                }
            }
        },
        "boards.InviteMemberRequest": {
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "user@example.com"
                },
                "role": {
                    "type": "string",
                    "example": "member"
                }
            }
        },
        "boards.MessageResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Board deleted"
                }
            }
        },
        "boards.UpdateBoardRequest": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "example": "Updated Board Name"
                }
            }
        },
        "cards.CardResponse": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "example": "2023-01-01T00:00:00Z"
                },
                "description": {
                    "type": "string",
                    "example": "The login form is not validating email properly"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "listId": {
                    "type": "integer",
                    "example": 1
                },
                "position": {
                    "type": "integer",
                    "example": 1
                },
                "title": {
                    "type": "string",
                    "example": "Fix login bug"
                }
            }
        },
        "cards.CreateCardRequest": {
            "type": "object",
            "required": [
                "position",
                "title"
            ],
            "properties": {
                "description": {
                    "type": "string",
                    "example": "The login form is not validating email properly"
                },
                "position": {
                    "type": "integer",
                    "example": 1
                },
                "title": {
                    "type": "string",
                    "example": "Fix login bug"
                }
            }
        },
        "cards.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Card not found"
                }
            }
        },
        "cards.MessageResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "card deleted"
                }
            }
        },
        "cards.MoveCardRequest": {
            "type": "object",
            "required": [
                "position"
            ],
            "properties": {
                "listId": {
                    "type": "integer",
                    "example": 2
                },
                "position": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "cards.UpdateCardRequest": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string",
                    "example": "Updated description of the bug"
                },
                "listId": {
                    "type": "integer",
                    "example": 3
                },
                "position": {
                    "type": "integer",
                    "example": 2
                },
                "title": {
                    "type": "string",
                    "example": "Fix login validation bug"
                }
            }
        },
        "lists.CreateListRequest": {
            "type": "object",
            "required": [
                "position",
                "title"
            ],
            "properties": {
                "position": {
                    "type": "integer",
                    "example": 1
                },
                "title": {
                    "type": "string",
                    "example": "To Do"
                }
            }
        },
        "lists.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "List not found"
                }
            }
        },
        "lists.ListResponse": {
            "type": "object",
            "properties": {
                "boardId": {
                    "type": "integer",
                    "example": 1
                },
                "createdAt": {
                    "type": "string",
                    "example": "2023-01-01T00:00:00Z"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "position": {
                    "type": "integer",
                    "example": 1
                },
                "title": {
                    "type": "string",
                    "example": "To Do"
                }
            }
        },
        "lists.MessageResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "list deleted"
                }
            }
        },
        "lists.MoveListRequest": {
            "type": "object",
            "required": [
                "position"
            ],
            "properties": {
                "position": {
                    "type": "number",
                    "example": 1.5
                }
            }
        },
        "lists.NormalizePositionsResponse": {
            "type": "object",
            "properties": {
                "lists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/lists.ListResponse"
                    }
                },
                "message": {
                    "type": "string",
                    "example": "positions normalized"
                }
            }
        },
        "lists.UpdateListRequest": {
            "type": "object",
            "properties": {
                "position": {
                    "type": "integer",
                    "example": 2
                },
                "title": {
                    "type": "string",
                    "example": "In Progress"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "Type \"Bearer\" followed by a space and JWT token.",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "CollabBoard API",
	Description:      "Collaborative Kanban board application with real-time updates",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
