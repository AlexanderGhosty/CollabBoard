// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: board_members.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addBoardMember = `-- name: AddBoardMember :one
INSERT INTO board_members (board_id, user_id, role)
VALUES ($1, $2, $3)
    RETURNING board_id, user_id, role
`

type AddBoardMemberParams struct {
	BoardID int32
	UserID  int32
	Role    string
}

func (q *Queries) AddBoardMember(ctx context.Context, arg AddBoardMemberParams) (BoardMember, error) {
	row := q.db.QueryRow(ctx, addBoardMember, arg.BoardID, arg.UserID, arg.Role)
	var i BoardMember
	err := row.Scan(&i.BoardID, &i.UserID, &i.Role)
	return i, err
}

const deleteBoardMember = `-- name: DeleteBoardMember :exec
DELETE FROM board_members
WHERE board_id = $1 AND user_id = $2
`

type DeleteBoardMemberParams struct {
	BoardID int32
	UserID  int32
}

func (q *Queries) DeleteBoardMember(ctx context.Context, arg DeleteBoardMemberParams) error {
	_, err := q.db.Exec(ctx, deleteBoardMember, arg.BoardID, arg.UserID)
	return err
}

const getBoardMember = `-- name: GetBoardMember :one
SELECT board_id, user_id, role
FROM board_members
WHERE board_id = $1 AND user_id = $2
`

type GetBoardMemberParams struct {
	BoardID int32
	UserID  int32
}

func (q *Queries) GetBoardMember(ctx context.Context, arg GetBoardMemberParams) (BoardMember, error) {
	row := q.db.QueryRow(ctx, getBoardMember, arg.BoardID, arg.UserID)
	var i BoardMember
	err := row.Scan(&i.BoardID, &i.UserID, &i.Role)
	return i, err
}

const listBoardMembers = `-- name: ListBoardMembers :many
SELECT u.id AS user_id, u.name, u.email, bm.role
FROM board_members bm
         JOIN users u ON u.id = bm.user_id
WHERE bm.board_id = $1
ORDER BY u.name
`

type ListBoardMembersRow struct {
	UserID int32
	Name   string
	Email  string
	Role   string
}

func (q *Queries) ListBoardMembers(ctx context.Context, boardID int32) ([]ListBoardMembersRow, error) {
	rows, err := q.db.Query(ctx, listBoardMembers, boardID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListBoardMembersRow
	for rows.Next() {
		var i ListBoardMembersRow
		if err := rows.Scan(
			&i.UserID,
			&i.Name,
			&i.Email,
			&i.Role,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listBoardsByUser = `-- name: ListBoardsByUser :many
SELECT b.id AS board_id, b.name, b.owner_id, b.created_at
FROM board_members bm
         JOIN boards b ON b.id = bm.board_id
WHERE bm.user_id = $1
ORDER BY b.created_at
`

type ListBoardsByUserRow struct {
	BoardID   int32
	Name      string
	OwnerID   int32
	CreatedAt pgtype.Timestamp
}

func (q *Queries) ListBoardsByUser(ctx context.Context, userID int32) ([]ListBoardsByUserRow, error) {
	rows, err := q.db.Query(ctx, listBoardsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListBoardsByUserRow
	for rows.Next() {
		var i ListBoardsByUserRow
		if err := rows.Scan(
			&i.BoardID,
			&i.Name,
			&i.OwnerID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listBoardsByUserAndRole = `-- name: ListBoardsByUserAndRole :many
SELECT b.id AS board_id, b.name, b.owner_id, b.created_at, bm.role
FROM board_members bm
         JOIN boards b ON b.id = bm.board_id
WHERE bm.user_id = $1 AND bm.role = $2
ORDER BY b.created_at
`

type ListBoardsByUserAndRoleParams struct {
	UserID int32
	Role   string
}

type ListBoardsByUserAndRoleRow struct {
	BoardID   int32
	Name      string
	OwnerID   int32
	CreatedAt pgtype.Timestamp
	Role      string
}

func (q *Queries) ListBoardsByUserAndRole(ctx context.Context, arg ListBoardsByUserAndRoleParams) ([]ListBoardsByUserAndRoleRow, error) {
	rows, err := q.db.Query(ctx, listBoardsByUserAndRole, arg.UserID, arg.Role)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListBoardsByUserAndRoleRow
	for rows.Next() {
		var i ListBoardsByUserAndRoleRow
		if err := rows.Scan(
			&i.BoardID,
			&i.Name,
			&i.OwnerID,
			&i.CreatedAt,
			&i.Role,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBoardMemberRole = `-- name: UpdateBoardMemberRole :one
UPDATE board_members
SET role = $3
WHERE board_id = $1 AND user_id = $2
    RETURNING board_id, user_id, role
`

type UpdateBoardMemberRoleParams struct {
	BoardID int32
	UserID  int32
	Role    string
}

func (q *Queries) UpdateBoardMemberRole(ctx context.Context, arg UpdateBoardMemberRoleParams) (BoardMember, error) {
	row := q.db.QueryRow(ctx, updateBoardMemberRole, arg.BoardID, arg.UserID, arg.Role)
	var i BoardMember
	err := row.Scan(&i.BoardID, &i.UserID, &i.Role)
	return i, err
}
