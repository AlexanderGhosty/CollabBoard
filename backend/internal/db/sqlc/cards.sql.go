// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: cards.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCard = `-- name: CreateCard :one
INSERT INTO cards (list_id, title, description, position)
VALUES ($1, $2, $3, $4)
    RETURNING id, list_id, title, description, position, created_at
`

type CreateCardParams struct {
	ListID      int32
	Title       string
	Description pgtype.Text
	Position    int32
}

func (q *Queries) CreateCard(ctx context.Context, arg CreateCardParams) (Card, error) {
	row := q.db.QueryRow(ctx, createCard,
		arg.ListID,
		arg.Title,
		arg.Description,
		arg.Position,
	)
	var i Card
	err := row.Scan(
		&i.ID,
		&i.ListID,
		&i.Title,
		&i.Description,
		&i.Position,
		&i.CreatedAt,
	)
	return i, err
}

const decCardPosAfter = `-- name: DecCardPosAfter :exec
UPDATE cards SET position = position - 1
WHERE list_id = $1 AND position >  $2
`

type DecCardPosAfterParams struct {
	ListID   int32
	Position int32
}

func (q *Queries) DecCardPosAfter(ctx context.Context, arg DecCardPosAfterParams) error {
	_, err := q.db.Exec(ctx, decCardPosAfter, arg.ListID, arg.Position)
	return err
}

const deleteCard = `-- name: DeleteCard :exec
DELETE FROM cards
WHERE id = $1
`

func (q *Queries) DeleteCard(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteCard, id)
	return err
}

const getCardByID = `-- name: GetCardByID :one
SELECT id, list_id, title, description, position, created_at
FROM cards
WHERE id = $1
`

func (q *Queries) GetCardByID(ctx context.Context, id int32) (Card, error) {
	row := q.db.QueryRow(ctx, getCardByID, id)
	var i Card
	err := row.Scan(
		&i.ID,
		&i.ListID,
		&i.Title,
		&i.Description,
		&i.Position,
		&i.CreatedAt,
	)
	return i, err
}

const incCardPosAfter = `-- name: IncCardPosAfter :exec
UPDATE cards SET position = position + 1
WHERE list_id = $1 AND position >= $2
`

type IncCardPosAfterParams struct {
	ListID   int32
	Position int32
}

func (q *Queries) IncCardPosAfter(ctx context.Context, arg IncCardPosAfterParams) error {
	_, err := q.db.Exec(ctx, incCardPosAfter, arg.ListID, arg.Position)
	return err
}

const listCardsByList = `-- name: ListCardsByList :many
SELECT id, list_id, title, description, position, created_at
FROM cards
WHERE list_id = $1
ORDER BY position
`

func (q *Queries) ListCardsByList(ctx context.Context, listID int32) ([]Card, error) {
	rows, err := q.db.Query(ctx, listCardsByList, listID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Card
	for rows.Next() {
		var i Card
		if err := rows.Scan(
			&i.ID,
			&i.ListID,
			&i.Title,
			&i.Description,
			&i.Position,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCard = `-- name: UpdateCard :one
UPDATE cards
SET title = $2,
    description = $3,
    position = $4,
    list_id = $5
WHERE id = $1
    RETURNING id, list_id, title, description, position, created_at
`

type UpdateCardParams struct {
	ID          int32
	Title       string
	Description pgtype.Text
	Position    int32
	ListID      int32
}

func (q *Queries) UpdateCard(ctx context.Context, arg UpdateCardParams) (Card, error) {
	row := q.db.QueryRow(ctx, updateCard,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.Position,
		arg.ListID,
	)
	var i Card
	err := row.Scan(
		&i.ID,
		&i.ListID,
		&i.Title,
		&i.Description,
		&i.Position,
		&i.CreatedAt,
	)
	return i, err
}
