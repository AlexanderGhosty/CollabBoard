// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: lists.sql

package db

import (
	"context"
)

const createList = `-- name: CreateList :one
INSERT INTO lists (board_id, title, position)
VALUES ($1, $2, $3)
    RETURNING id, board_id, title, position, created_at
`

type CreateListParams struct {
	BoardID  int32
	Title    string
	Position int32
}

func (q *Queries) CreateList(ctx context.Context, arg CreateListParams) (List, error) {
	row := q.db.QueryRow(ctx, createList, arg.BoardID, arg.Title, arg.Position)
	var i List
	err := row.Scan(
		&i.ID,
		&i.BoardID,
		&i.Title,
		&i.Position,
		&i.CreatedAt,
	)
	return i, err
}

const decListPosAfter = `-- name: DecListPosAfter :exec
UPDATE lists SET position = position - 1
WHERE board_id = $1 AND position >  $2
`

type DecListPosAfterParams struct {
	BoardID  int32
	Position int32
}

func (q *Queries) DecListPosAfter(ctx context.Context, arg DecListPosAfterParams) error {
	_, err := q.db.Exec(ctx, decListPosAfter, arg.BoardID, arg.Position)
	return err
}

const deleteList = `-- name: DeleteList :exec
DELETE FROM lists
WHERE id = $1
`

func (q *Queries) DeleteList(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteList, id)
	return err
}

const getListByID = `-- name: GetListByID :one
SELECT id, board_id, title, position, created_at
FROM lists
WHERE id = $1
`

func (q *Queries) GetListByID(ctx context.Context, id int32) (List, error) {
	row := q.db.QueryRow(ctx, getListByID, id)
	var i List
	err := row.Scan(
		&i.ID,
		&i.BoardID,
		&i.Title,
		&i.Position,
		&i.CreatedAt,
	)
	return i, err
}

const incListPosAfter = `-- name: IncListPosAfter :exec
UPDATE lists SET position = position + 1
WHERE board_id = $1 AND position >= $2
`

type IncListPosAfterParams struct {
	BoardID  int32
	Position int32
}

func (q *Queries) IncListPosAfter(ctx context.Context, arg IncListPosAfterParams) error {
	_, err := q.db.Exec(ctx, incListPosAfter, arg.BoardID, arg.Position)
	return err
}

const listListsByBoard = `-- name: ListListsByBoard :many
SELECT id, board_id, title, position, created_at
FROM lists
WHERE board_id = $1
ORDER BY position
`

func (q *Queries) ListListsByBoard(ctx context.Context, boardID int32) ([]List, error) {
	rows, err := q.db.Query(ctx, listListsByBoard, boardID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []List
	for rows.Next() {
		var i List
		if err := rows.Scan(
			&i.ID,
			&i.BoardID,
			&i.Title,
			&i.Position,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateList = `-- name: UpdateList :one
UPDATE lists
SET title = $2, position = $3
WHERE id = $1
    RETURNING id, board_id, title, position, created_at
`

type UpdateListParams struct {
	ID       int32
	Title    string
	Position int32
}

func (q *Queries) UpdateList(ctx context.Context, arg UpdateListParams) (List, error) {
	row := q.db.QueryRow(ctx, updateList, arg.ID, arg.Title, arg.Position)
	var i List
	err := row.Scan(
		&i.ID,
		&i.BoardID,
		&i.Title,
		&i.Position,
		&i.CreatedAt,
	)
	return i, err
}
