// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: boards.sql

package db

import (
	"context"
)

const createBoard = `-- name: CreateBoard :one
INSERT INTO boards (name, owner_id)
VALUES ($1, $2)
    RETURNING id, name, owner_id, created_at
`

type CreateBoardParams struct {
	Name    string
	OwnerID int32
}

func (q *Queries) CreateBoard(ctx context.Context, arg CreateBoardParams) (Board, error) {
	row := q.db.QueryRow(ctx, createBoard, arg.Name, arg.OwnerID)
	var i Board
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.OwnerID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteBoard = `-- name: DeleteBoard :exec
DELETE FROM boards
WHERE id = $1
`

func (q *Queries) DeleteBoard(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteBoard, id)
	return err
}

const getBoardByID = `-- name: GetBoardByID :one
SELECT id, name, owner_id, created_at
FROM boards
WHERE id = $1
`

func (q *Queries) GetBoardByID(ctx context.Context, id int32) (Board, error) {
	row := q.db.QueryRow(ctx, getBoardByID, id)
	var i Board
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.OwnerID,
		&i.CreatedAt,
	)
	return i, err
}

const listBoards = `-- name: ListBoards :many
SELECT id, name, owner_id, created_at
FROM boards
ORDER BY created_at
`

func (q *Queries) ListBoards(ctx context.Context) ([]Board, error) {
	rows, err := q.db.Query(ctx, listBoards)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Board
	for rows.Next() {
		var i Board
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.OwnerID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listBoardsByMember = `-- name: ListBoardsByMember :many
SELECT b.id, b.name, b.owner_id, b.created_at
FROM boards b
         JOIN board_members bm ON bm.board_id = b.id
WHERE bm.user_id = $1
ORDER BY b.created_at
`

func (q *Queries) ListBoardsByMember(ctx context.Context, userID int32) ([]Board, error) {
	rows, err := q.db.Query(ctx, listBoardsByMember, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Board
	for rows.Next() {
		var i Board
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.OwnerID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBoard = `-- name: UpdateBoard :one
UPDATE boards
SET name = $2
WHERE id = $1
    RETURNING id, name, owner_id, created_at
`

type UpdateBoardParams struct {
	ID   int32
	Name string
}

func (q *Queries) UpdateBoard(ctx context.Context, arg UpdateBoardParams) (Board, error) {
	row := q.db.QueryRow(ctx, updateBoard, arg.ID, arg.Name)
	var i Board
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.OwnerID,
		&i.CreatedAt,
	)
	return i, err
}
